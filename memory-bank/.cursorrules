# WorkforceHub Cursor Rules

## Project Patterns

### Code Organization
1. Frontend
   - Use feature-based folder structure
   - Keep components small and focused
   - Use TypeScript for type safety
   - Follow atomic design pattern

2. Backend
   - Follow layered architecture
   - Use DTOs for data transfer
   - Implement proper exception handling
   - Follow REST API best practices

### Naming Conventions
1. Frontend
   - Components: PascalCase
   - Hooks: useCamelCase
   - Utils: camelCase
   - Types: PascalCase
   - Files: kebab-case

2. Backend
   - Classes: PascalCase
   - Methods: camelCase
   - Variables: camelCase
   - Constants: UPPER_SNAKE_CASE
   - Packages: lowercase

### Code Style
1. Frontend
   - Use functional components
   - Implement proper prop types
   - Use hooks for state management
   - Follow React best practices

2. Backend
   - Use constructor injection
   - Implement proper logging
   - Follow SOLID principles
   - Use proper annotations

## User Preferences

### Development Workflow
1. Frontend
   - Use Vite for development
   - Enable hot module replacement
   - Use TypeScript strict mode
   - Implement proper error boundaries

2. Backend
   - Use Spring Boot dev tools
   - Enable automatic restart
   - Use proper logging levels
   - Implement proper validation

### Testing
1. Frontend
   - Use Jest for unit tests
   - Use React Testing Library
   - Implement E2E tests with Cypress
   - Use proper test coverage

2. Backend
   - Use JUnit for unit tests
   - Use Spring Test for integration
   - Implement proper test data
   - Use proper assertions

### Documentation
1. Frontend
   - Use JSDoc for components
   - Document props and types
   - Keep README up to date
   - Document API integration

2. Backend
   - Use JavaDoc for classes
   - Document API endpoints
   - Keep documentation updated
   - Use proper annotations

## Tool Usage

### Version Control
1. Git
   - Use feature branches
   - Follow conventional commits
   - Keep commits atomic
   - Use proper PR templates

2. Code Review
   - Review for security
   - Check for performance
   - Verify test coverage
   - Ensure proper documentation

### IDE
1. VS Code
   - Use recommended extensions
   - Enable format on save
   - Use proper snippets
   - Configure proper settings

2. IntelliJ
   - Use proper plugins
   - Enable code inspection
   - Use proper templates
   - Configure proper settings

## Project Intelligence

### Critical Paths
1. Authentication
   - Microsoft OAuth flow
   - JWT token management
   - Role-based access
   - Session handling

2. Data Management
   - Entity relationships
   - Data validation
   - Error handling
   - Performance optimization

### Known Challenges
1. Frontend
   - TypeScript configurations
   - State management
   - API integration
   - Performance optimization

2. Backend
   - Security implementation
   - Database optimization
   - API design
   - Error handling

### Best Practices
1. Frontend
   - Use proper hooks
   - Implement proper routing
   - Handle errors gracefully
   - Optimize performance

2. Backend
   - Use proper security
   - Implement proper logging
   - Handle exceptions properly
   - Optimize database queries 